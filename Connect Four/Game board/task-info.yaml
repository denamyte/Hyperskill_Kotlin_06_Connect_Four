type: edu
files:
  - name: src/connectfour/Main.kt
    visible: true
    text: |-
      package connectfour
      
      fun main() {
          println("Hello World!")
      }
    learner_created: false
  - name: test/ConnectFourTest.kt
    visible: false
    text: |+
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.TestedProgram
      
      class ConnectFourTest : StageTest<Any>() {
      
          @DynamicTest
          fun cf4Test(): CheckResult {
              val whiteDiscs = mutableListOf<Pair<Int, Int>>()
              val blackDiscs = mutableListOf<Pair<Int, Int>>()
              val inputDimensions = listOf<String>("5x5", "9X9", "9X5", "", "   7   x   9   ", "  8  X   6   ", "\t  9 \tX \t5  \t ")
      
              for (input in inputDimensions) {
                  val main = TestedProgram()
                  var outputString = main.start().trim()
      
                  var position = checkOutput(outputString.lowercase(), 0, "connect four")
                  if (position == -1) return CheckResult(false, "Wrong program title.")
                  position = checkOutput(outputString.lowercase(), position, "first player's name:")
                  if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")
      
                  outputString = main.execute("Anna").trim()
                  position = checkOutput(outputString.lowercase(), 0, "second player's name:")
                  if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")
      
                  outputString = main.execute("Joan").trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")
      
                  outputString = main.execute(input).trim()
                  val (r, c) = if (input == "") listOf("6", "7") else input.lowercase().split("x").map{ it -> it.trim() }
      
                  position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "$r x $c board")
                  if (position == -1) return CheckResult(false, "Wrong game information output.")
                  position = checkOutput(outputString.lowercase(), position,
                      * getBoard(r.toInt(), c.toInt() ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
      
                  main.stop()
              }
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf2Test(): CheckResult {
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if ( position  == -1 ) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              var inputDimensions = mutableListOf<String>("4x5", "4X5", "10x6", "12x6")
              for (input in inputDimensions) {
                  outputString = main.execute(input).trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "board rows should be from 5 to 9",
                      "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false,
                      "Wrong error message for out of range row size.")
              }
      
              inputDimensions = mutableListOf<String>("6x1", "7X4", "8x10", "9x30")
              for (input in inputDimensions) {
                  outputString = main.execute(input).trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "board columns should be from 5 to 9",
                      "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false, "Wrong error message for out of range column size.")
              }
      
              outputString = main.execute("9X5").trim()
              position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "9 x 5 board")
              if (position == -1) return CheckResult(false, "Wrong game information output.")
      
              main.stop()
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf3Test(): CheckResult {
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if ( position  == -1 ) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              val inputDimensions = mutableListOf<String>("6x", "X5", "10k6", "12Z6", "a  7x9", "5x8  t")
              for (input in inputDimensions) {
                  outputString = main.execute(input).trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "invalid input", "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false,
                      "Wrong error message for out of range row size.")
              }
      
              outputString = main.execute("9X5").trim()
              position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "9 x 5 board")
              if (position == -1) return CheckResult(false, "Wrong game information output.")
      
              main.stop()
              return CheckResult.correct()
          }
      
      }
      
      fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
          var searchPosition = searchPos
          val isPlainText = outputString.contains('|') || outputString.contains('=')
          for (str in checkStr) {
              val newStr = if ( isPlainText ) str
                  .replace('║', '|')
                  .replace('╚', '=')
                  .replace('═', '=')
                  .replace('╩', '=')
                  .replace('╝', '=')
              else str
              val findPosition = outputString.indexOf(newStr, searchPosition)
              if (findPosition == -1) return -1
              if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
              searchPosition = findPosition + newStr.length
          }
          return searchPosition
      }
      
      fun getBoard(rows: Int, columns: Int, whiteDiscs: MutableList<Pair<Int, Int>>, blackDiscs: MutableList<Pair<Int, Int>>): Array<String> {
          val boardStr = StringBuilder()
          for (i in 1 until columns)
              boardStr.append("$i ")
          boardStr.appendLine("$columns")
      
          for (j in rows downTo 1) {
              for (i in 1..columns) {
                  val strPos = if ( whiteDiscs.contains(Pair(j, i)) ) "║o" else if ( blackDiscs.contains(Pair(j, i)) ) "║*" else "║ "
                  boardStr.append(strPos)
              }
              boardStr.appendLine("║")
          }
      
          boardStr.append("╚═")
          for (i in 1 until columns)
              boardStr.append("╩═")
          boardStr.appendLine("╝")
      
          return boardStr.toString().split("\n").toTypedArray()
      }
    
    
    learner_created: false
  - name: src/connectfour/Input.kt
    visible: true
    text: |-
      package connectfour
      
      val DIM_REGEX = Regex("""\s*\d+\s*[xX]\s*\d+\s*""")
      val NUMBER_REGEX = Regex("\\d+")
      const val DEFAULT_ROWS = 6
      const val DEFAULT_COLUMNS = 7
      val DIM_RANGE = 5..9
      
      class Input {
      
          private var name1: String = ""
          private var name2: String = ""
          private var rows: Int = DEFAULT_ROWS
          private var columns: Int = DEFAULT_COLUMNS
      
          fun run() {
              greeting()
              name1 = inputName("First")
              name2 = inputName("Second")
              inputBoardDimensions()
              showParams()
          }
      
          private fun greeting() = println("Connect Four")
      
          private fun inputName(number: String): String {
              println("$number player's name:")
              return readln()
          }
      
          private fun inputBoardDimensions() {
              while (true) {
                  println(
                      """
                      Set the board dimensions (Rows x Columns)
                      Press Enter for default (6 x 7)""".trimIndent()
                  )
                  val rawDim = readln()
      
                  if (rawDim.isEmpty()) return
      
                  if (!DIM_REGEX.matches(rawDim)) {
                      println("Invalid input")
                      continue
                  }
      
                  var match = NUMBER_REGEX.find(rawDim) ?: continue
                  rows = match.value.toInt()
                  if (!checkDimension(rows, "rows")) continue
      
                  match = match.next() ?: continue
                  columns = match.value.toInt()
                  if (!checkDimension(columns, "columns")) continue
      
                  return
              }
          }
      
          private fun checkDimension(dim: Int, what: String): Boolean {
              if (dim !in DIM_RANGE) {
                  println("Board $what should be from ${DIM_RANGE.first} to ${DIM_RANGE.last}")
                  return false
              }
              return true
          }
      
          private fun showParams() {
              println(
                  """
                  $name1 VS $name2
                  $rows x $columns board""".trimIndent()
              )
          }
      
      }
    learner_created: true
  - name: src/connectfour/Board.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/14779#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 27 Aug 2023 20:47:15 UTC"
record: 2
