type: edu
files:
  - name: src/connectfour/Main.kt
    visible: true
    text: |-
      package connectfour
      
      fun main() {
          println("Hello World!")
      }
    learner_created: false
  - name: test/ConnectFourTest.kt
    visible: false
    text: |+
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.TestedProgram
      
      class ConnectFourTest : StageTest<Any>() {
      
          @DynamicTest
          fun cf23Test(): CheckResult {
              val whiteDiscs = mutableListOf<Pair<Int, Int>>()
              val blackDiscs = mutableListOf<Pair<Int, Int>>()
              val inputNoOfGames = listOf<String>("0", "X", "i")
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if (position == -1) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              outputString = main.execute("5x6").trim()
      
              position = checkOutput(outputString.lowercase(), 0, "do you want to play single or multiple games?",
                  "for a single game, input 1 or press enter", "input a number of games:")
              if (position == -1) return CheckResult(false, "Wrong prompt for multiple games.")
      
              for (input in inputNoOfGames) {
                  outputString = main.execute(input).trim()
                  position = checkOutput(
                      outputString.lowercase(), 0, "invalid input",
                      "do you want to play single or multiple games?",
                      "for a single game, input 1 or press enter", "input a number of games:"
                  )
                  if (position == -1) return CheckResult(false, "Wrong output after input of invalid number of games.")
              }
      
              main.stop()
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf16Test(): CheckResult {
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if ( position  == -1 ) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              var inputDimensions = mutableListOf<String>("4x5", "4X5", "10x6", "12x6")
              for (input in inputDimensions) {
                  outputString = main.execute(input).trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "board rows should be from 5 to 9",
                      "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false,
                      "Wrong error message for out of range row size.")
              }
      
              inputDimensions = mutableListOf<String>("6x1", "7X4", "8x10", "9x30")
              for (input in inputDimensions) {
                  outputString = main.execute(input).trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "board columns should be from 5 to 9",
                      "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false, "Wrong error message for out of range column size.")
              }
      
              main.stop()
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf17Test(): CheckResult {
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if ( position  == -1 ) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if ( position  == -1 ) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              val inputDimensions = mutableListOf<String>("6x", "X5", "10k6", "12Z6", "a  7x9", "5x8  t")
              for (input in inputDimensions) {
                  outputString = main.execute(input).trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "invalid input", "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false,
                      "Wrong error message for out of range row size.")
              }
      
              main.stop()
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf18Test(): CheckResult {
              val whiteDiscs = mutableListOf<Pair<Int, Int>>()
              val blackDiscs = mutableListOf<Pair<Int, Int>>()
              val inputDimensions = listOf<String>("5x5", "9X9", "9X5", "", "   7   x   9   ", "  8  X   6   ", "\t  9 \tX \t5  \t ")
      
              for (input in inputDimensions) {
                  val main = TestedProgram()
                  var outputString = main.start().trim()
      
                  var position = checkOutput(outputString.lowercase(), 0, "connect four")
                  if (position == -1) return CheckResult(false, "Wrong program title.")
                  position = checkOutput(outputString.lowercase(), position, "first player's name:")
                  if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")
      
                  outputString = main.execute("Anna").trim()
                  position = checkOutput(outputString.lowercase(), 0, "second player's name:")
                  if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")
      
                  outputString = main.execute("Joan").trim()
                  position = checkOutput(outputString.lowercase(), 0,
                      "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                  if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")
      
                  outputString = main.execute(input).trim()
                  val (r, c) = if (input == "") listOf("6", "7") else input.lowercase().split("x").map{ it -> it.trim() }
      
                  position = checkOutput(outputString.lowercase(), 0, "do you want to play single or multiple games?",
                      "for a single game, input 1 or press enter", "input a number of games:")
                  if (position == -1) return CheckResult(false, "Wrong prompt for multiple games.")
      
                  outputString = main.execute("1").trim()
                  position = checkOutput(outputString.lowercase(), 0, "anna vs joan",
                      "$r x $c board", "single game")
                  if (position == -1) return CheckResult(false, "Wrong game information output.")
                  position = checkOutput(outputString.lowercase(), position,
                      * getBoard(r.toInt(), c.toInt() ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
                  main.stop()
              }
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf19Test(): CheckResult {
              val whiteDiscs = mutableListOf<Pair<Int, Int>>()
              val blackDiscs = mutableListOf<Pair<Int, Int>>()
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if (position == -1) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              outputString = main.execute("8x7").trim()
              position = checkOutput(outputString.lowercase(), 0, "do you want to play single or multiple games?",
                  "for a single game, input 1 or press enter", "input a number of games:")
              if (position == -1) return CheckResult(false, "Wrong prompt for multiple games.")
      
              outputString = main.execute("").trim()
              position = checkOutput(outputString.lowercase(), 0, "anna vs joan",
                  "8 x 7 board", "single game")
              if (position == -1) return CheckResult(false, "Wrong game information output, after Enter Pressed (single game).")
              position = checkOutput(outputString.lowercase(), position,
                  * getBoard(8, 7 ,whiteDiscs, blackDiscs))
              if (position == -1) return CheckResult(false, "Wrong board output.")
              main.stop()
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf20Test(): CheckResult {
              val whiteDiscs = mutableListOf<Pair<Int, Int>>()
              val blackDiscs = mutableListOf<Pair<Int, Int>>()
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if (position == -1) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              outputString = main.execute("5X5").trim()
              position = checkOutput(outputString.lowercase(), 0, "do you want to play single or multiple games?",
                  "for a single game, input 1 or press enter", "input a number of games:")
              if (position == -1) return CheckResult(false, "Wrong prompt for multiple games.")
      
              outputString = main.execute("1").trim()
              position = checkOutput(outputString.lowercase(), 0, "anna vs joan",
                  "5 x 5 board", "single game")
              if (position == -1) return CheckResult(false, "Wrong game information output.")
              position = checkOutput(outputString.lowercase(), position,
                  * getBoard(5, 5 ,whiteDiscs, blackDiscs))
              if (position == -1) return CheckResult(false, "Wrong board output.")
              position = checkOutput(outputString.lowercase(), position, "anna\'s turn")
              if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")
      
              var input = mutableListOf<String>("0", "6", "7", "10", "122")
              for (move in input) {
                  outputString = main.execute(move).trim()
                  position = checkOutput(outputString.lowercase(), 0, "the column number is out of range (1 - 5)",
                      "anna\'s turn")
                  if (position == -1) return CheckResult(false,"Wrong message for out of range input.")
              }
      
              input = mutableListOf<String>("one", "7i", "k", "12z")
              for (move in input) {
                  outputString = main.execute(move).trim()
                  position = checkOutput(outputString.lowercase(), 0, "incorrect column number",
                      "anna\'s turn")
                  if (position == -1) return CheckResult(false,"Wrong message for invalid column number.")
              }
      
              outputString = main.execute("end").trim()
              position = checkOutput(outputString.lowercase(), 0, "game over!")
              if (position == -1) return CheckResult(false, "Wrong \"Game over!\" message.")
      
              if (!main.isFinished) return CheckResult(false, "Program has not finished after end command")
      
              main.stop()
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf21Test(): CheckResult {
              val whiteDiscs = mutableListOf<Pair<Int, Int>>()
              val blackDiscs = mutableListOf<Pair<Int, Int>>()
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if (position == -1) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              outputString = main.execute("5X5").trim()
              position = checkOutput(outputString.lowercase(), 0, "do you want to play single or multiple games?",
                  "for a single game, input 1 or press enter", "input a number of games:")
              if (position == -1) return CheckResult(false, "Wrong prompt for multiple games.")
      
              outputString = main.execute("3").trim()
              position = checkOutput(outputString.lowercase(), 0, "anna vs joan",
                  "5 x 5 board", "total 3 games", "game #1")
              if (position == -1) return CheckResult(false, "Wrong game information output.")
              position = checkOutput(outputString.lowercase(), position,
                  * getBoard(5, 5 ,whiteDiscs, blackDiscs))
              if (position == -1) return CheckResult(false, "Wrong board output.")
              position = checkOutput(outputString.lowercase(), position, "anna\'s turn")
              if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")
      
              val colHeight = MutableList(5) { 0 }
              var input = listOf<Int>(5, 2, 5, 3, 5, 4, 5)
              for ((index, move) in input.withIndex()) {
                  outputString = main.execute(move.toString()).trim()
                  colHeight[move - 1]++
                  if ( index % 2 == 0 ) whiteDiscs.add(Pair(colHeight[move - 1], move)) else blackDiscs.add(Pair(colHeight[move - 1], move))
                  position = checkOutput(outputString.lowercase(), 0,
                      * getBoard(5, 5 ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
                  val checkOutStr = if (index == 6) {
                      colHeight.replaceAll { 0 }
                      whiteDiscs.clear()
                      blackDiscs.clear()
                      arrayOf("player anna won", "score", "anna: 2 joan: 0", "game #2",
                          * getBoard(5, 5 ,whiteDiscs, blackDiscs), "joan\'s turn")
                  }
                  else if ( index % 2 == 1 ) arrayOf("anna\'s turn") else arrayOf("joan\'s turn")
                  position = checkOutput(outputString.lowercase(), position, * checkOutStr)
                  val errorStr = if (index == 6) "Wrong message after the end of a game of multiple games." else "Wrong prompt for player's turn."
                  if (position == -1) return CheckResult(false, errorStr)
              }
      
              input = listOf<Int>(1, 1, 2, 2, 3, 3, 4)
              for ((index, move) in input.withIndex()) {
                  outputString = main.execute(move.toString()).trim()
                  colHeight[move - 1]++
                  if ( index % 2 == 1 ) whiteDiscs.add(Pair(colHeight[move - 1], move)) else blackDiscs.add(Pair(colHeight[move - 1], move))
                  position = checkOutput(outputString.lowercase(), 0,
                      * getBoard(5, 5 ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
                  val checkOutStr = if (index == 6) {
                      colHeight.replaceAll { 0 }
                      whiteDiscs.clear()
                      blackDiscs.clear()
                      arrayOf("player joan won", "score", "anna: 2 joan: 2", "game #3",
                          * getBoard(5, 5 ,whiteDiscs, blackDiscs), "anna\'s turn")
                  }
                  else if ( index % 2 == 0 ) arrayOf("anna\'s turn") else arrayOf("joan\'s turn")
                  position = checkOutput(outputString.lowercase(), position, * checkOutStr)
                  val errorStr = if (index == 6) "Wrong message after the end of a game of multiple games." else "Wrong prompt for player's turn."
                  if (position == -1) return CheckResult(false, errorStr)
              }
      
              input = listOf<Int>(5, 1, 4, 1, 3, 1, 2)
              for ((index, move) in input.withIndex()) {
                  outputString = main.execute(move.toString()).trim()
                  colHeight[move - 1]++
                  if ( index % 2 == 0 ) whiteDiscs.add(Pair(colHeight[move - 1], move)) else blackDiscs.add(Pair(colHeight[move - 1], move))
                  position = checkOutput(outputString.lowercase(), 0,
                      * getBoard(5, 5 ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
                  val checkOutStr = if (index == 6) {
                      colHeight.replaceAll { 0 }
                      whiteDiscs.clear()
                      blackDiscs.clear()
                      arrayOf("player anna won", "score", "anna: 4 joan: 2", "game over!")
                  }
                  else if ( index % 2 == 1 ) arrayOf("anna\'s turn") else arrayOf("joan\'s turn")
                  position = checkOutput(outputString.lowercase(), position, * checkOutStr)
                  val errorStr = if (index == 6) "Wrong message after the end of a game of multiple games." else "Wrong prompt for player's turn."
                  if (position == -1) return CheckResult(false, errorStr)
              }
      
              main.stop()
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun cf22Test(): CheckResult {
              val whiteDiscs = mutableListOf<Pair<Int, Int>>()
              val blackDiscs = mutableListOf<Pair<Int, Int>>()
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.lowercase(), 0, "connect four")
              if (position == -1) return CheckResult(false, "Wrong program title.")
              position = checkOutput(outputString.lowercase(), position, "first player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")
      
              outputString = main.execute("Anna").trim()
              position = checkOutput(outputString.lowercase(), 0, "second player's name:")
              if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")
      
              outputString = main.execute("Joan").trim()
              position = checkOutput(outputString.lowercase(), 0,
                  "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
              if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")
      
              outputString = main.execute("5X5").trim()
              position = checkOutput(outputString.lowercase(), 0, "do you want to play single or multiple games?",
                  "for a single game, input 1 or press enter", "input a number of games:")
              if (position == -1) return CheckResult(false, "Wrong prompt for multiple games.")
      
              outputString = main.execute("3").trim()
              position = checkOutput(outputString.lowercase(), 0, "anna vs joan",
                  "5 x 5 board", "total 3 games", "game #1")
              if (position == -1) return CheckResult(false, "Wrong game information output.")
              position = checkOutput(outputString.lowercase(), position,
                  * getBoard(5, 5 ,whiteDiscs, blackDiscs))
              if (position == -1) return CheckResult(false, "Wrong board output.")
              position = checkOutput(outputString.lowercase(), position, "anna\'s turn")
              if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")
      
              val colHeight = MutableList(5) { 0 }
              var input = listOf<Int>(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 1, 5, 1)
              for ((index, move) in input.withIndex()) {
                  outputString = main.execute(move.toString()).trim()
                  colHeight[move - 1]++
                  if ( index % 2 == 0 ) whiteDiscs.add(Pair(colHeight[move - 1], move)) else blackDiscs.add(Pair(colHeight[move - 1], move))
                  position = checkOutput(outputString.lowercase(), 0,
                      * getBoard(5, 5 ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
                  val checkOutStr = if (index == 24) {
                      colHeight.replaceAll { 0 }
                      whiteDiscs.clear()
                      blackDiscs.clear()
                      arrayOf("it is a draw", "score", "anna: 1 joan: 1", "game #2",
                          * getBoard(5, 5 ,whiteDiscs, blackDiscs), "joan\'s turn")
                  }
                  else if ( index % 2 == 1 ) arrayOf("anna\'s turn") else arrayOf("joan\'s turn")
                  position = checkOutput(outputString.lowercase(), position, * checkOutStr)
                  val errorStr = if (index == 24) "Wrong message after the end of a game of multiple games." else "Wrong prompt for player's turn."
                  if (position == -1) return CheckResult(false, errorStr)
              }
      
              input = listOf<Int>(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 1, 5, 1)
              for ((index, move) in input.withIndex()) {
                  outputString = main.execute(move.toString()).trim()
                  colHeight[move - 1]++
                  if ( index % 2 == 1 ) whiteDiscs.add(Pair(colHeight[move - 1], move)) else blackDiscs.add(Pair(colHeight[move - 1], move))
                  position = checkOutput(outputString.lowercase(), 0,
                      * getBoard(5, 5 ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
                  val checkOutStr = if (index == 24) {
                      colHeight.replaceAll { 0 }
                      whiteDiscs.clear()
                      blackDiscs.clear()
                      arrayOf("it is a draw", "score", "anna: 2 joan: 2", "game #3",
                          * getBoard(5, 5 ,whiteDiscs, blackDiscs), "anna\'s turn")
                  }
                  else if ( index % 2 == 0 ) arrayOf("anna\'s turn") else arrayOf("joan\'s turn")
                  position = checkOutput(outputString.lowercase(), position, * checkOutStr)
                  val errorStr = if (index == 24) "Wrong message after the end of a game of multiple games." else "Wrong prompt for player's turn."
                  if (position == -1) return CheckResult(false, errorStr)
              }
      
              input = listOf<Int>(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 1, 5, 1)
              for ((index, move) in input.withIndex()) {
                  outputString = main.execute(move.toString()).trim()
                  colHeight[move - 1]++
                  if ( index % 2 == 0 ) whiteDiscs.add(Pair(colHeight[move - 1], move)) else blackDiscs.add(Pair(colHeight[move - 1], move))
                  position = checkOutput(outputString.lowercase(), 0,
                      * getBoard(5, 5 ,whiteDiscs, blackDiscs))
                  if (position == -1) return CheckResult(false, "Wrong board output.")
                  val checkOutStr = if (index == 24) {
                      colHeight.replaceAll { 0 }
                      whiteDiscs.clear()
                      blackDiscs.clear()
                      arrayOf("it is a draw", "score", "anna: 3 joan: 3", "game over!")
                  }
                  else if ( index % 2 == 1 ) arrayOf("anna\'s turn") else arrayOf("joan\'s turn")
                  position = checkOutput(outputString.lowercase(), position, * checkOutStr)
                  val errorStr = if (index == 24) "Wrong message after the end of a game of multiple games." else "Wrong prompt for player's turn."
                  if (position == -1) return CheckResult(false, errorStr)
              }
      
              main.stop()
              return CheckResult.correct()
          }
      
      }
      
      fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
          var searchPosition = searchPos
          val isPlainText = outputString.contains('|') || outputString.contains('=')
          for (str in checkStr) {
              val newStr = if ( isPlainText ) str
                  .replace('║', '|')
                  .replace('╚', '=')
                  .replace('═', '=')
                  .replace('╩', '=')
                  .replace('╝', '=')
              else str
              val findPosition = outputString.indexOf(newStr, searchPosition)
              if (findPosition == -1) return -1
              if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
              searchPosition = findPosition + newStr.length
          }
          return searchPosition
      }
      
      fun getBoard(rows: Int, columns: Int, whiteDiscs: MutableList<Pair<Int, Int>>, blackDiscs: MutableList<Pair<Int, Int>>): Array<String> {
          val boardStr = StringBuilder()
          for (i in 1 until columns)
              boardStr.append("$i ")
          boardStr.appendLine("$columns")
      
          for (j in rows downTo 1) {
              for (i in 1..columns) {
                  val strPos = if ( whiteDiscs.contains(Pair(j, i)) ) "║o" else if ( blackDiscs.contains(Pair(j, i)) ) "║*" else "║ "
                  boardStr.append(strPos)
              }
              boardStr.appendLine("║")
          }
      
          boardStr.append("╚═")
          for (i in 1 until columns)
              boardStr.append("╩═")
          boardStr.appendLine("╝")
      
          return boardStr.toString().split("\n").toTypedArray()
      }
    
    
    learner_created: false
  - name: src/connectfour/Game.kt
    visible: true
    text: |-
      package connectfour
      
      class Game(private val board: Board,
                 private val players: Array<Player>) {
      
          fun run() {
              var playerIndex = 0
              var finished = false
              while (!finished) {
                  board.print()
                  val player = players[playerIndex]
      
                  while (true) {
                      println("${player.name}'s turn:")
                      val sMove = readln()
      
                      if (sMove == "end") {
                          finished = true
                          break
                      }
      
                      if (!NUMBER_REGEX.matches(sMove)) {
                          println("Incorrect column number")
                          continue
                      }
      
                      val move = sMove.toInt() - 1
                      if (board.inputRangeErrors(move)) continue
      
                      board.makeMove(move, player.marker)
      
                      if (board.isWinningCondition()) {
                          board.print()
                          println("Player ${player.name} won")
                          finished = true
                          break
                      }
      
                      if (board.isDraw()) {
                          board.print()
                          println("It is a draw")
                          finished = true
                      }
      
                      break
                  }
                  playerIndex = (playerIndex + 1) % players.size
              }
              println("Game over!")
          }
      
      }
    learner_created: true
  - name: src/connectfour/Player.kt
    visible: true
    text: |-
      package connectfour
      
      class Player(val name: String, val marker: Char)
    learner_created: true
  - name: src/connectfour/Input.kt
    visible: true
    text: |-
      package connectfour
      
      val DIM_REGEX = Regex("""\s*\d+\s*[xX]\s*\d+\s*""")
      val NUMBER_REGEX = Regex("\\d+")
      const val DEFAULT_ROWS = 6
      const val DEFAULT_COLUMNS = 7
      val DIM_RANGE = 5..9
      
      class Input {
      
          private var name1: String = ""
          private var name2: String = ""
          var rows: Int = DEFAULT_ROWS
              private set
          var columns: Int = DEFAULT_COLUMNS
              private set
      
          val players: Array<Player>
              get() = arrayOf(
                  Player(name1, 'o'),
                  Player(name2, '*')
              )
      
          fun run() {
              greeting()
              name1 = inputName("First")
              name2 = inputName("Second")
              inputBoardDimensions()
              showParams()
          }
      
          private fun greeting() = println("Connect Four")
      
          private fun inputName(number: String): String {
              println("$number player's name:")
              return readln()
          }
      
          private fun inputBoardDimensions() {
              while (true) {
                  println(
                      """
                      Set the board dimensions (Rows x Columns)
                      Press Enter for default (6 x 7)""".trimIndent()
                  )
                  val rawDim = readln()
      
                  if (rawDim.isEmpty()) return
      
                  if (!DIM_REGEX.matches(rawDim)) {
                      println("Invalid input")
                      continue
                  }
      
                  var match = NUMBER_REGEX.find(rawDim) ?: continue
                  rows = match.value.toInt()
                  if (!checkDimension(rows, "rows")) continue
      
                  match = match.next() ?: continue
                  columns = match.value.toInt()
                  if (!checkDimension(columns, "columns")) continue
      
                  return
              }
          }
      
          private fun checkDimension(dim: Int, what: String): Boolean {
              if (dim !in DIM_RANGE) {
                  println("Board $what should be from ${DIM_RANGE.first} to ${DIM_RANGE.last}")
                  return false
              }
              return true
          }
      
          private fun showParams() {
              println(
                  """
                  $name1 VS $name2
                  $rows x $columns board""".trimIndent()
              )
          }
      
      }
    learner_created: true
  - name: src/connectfour/Board.kt
    visible: true
    text: |-
      package connectfour
      
      val markerValues = mapOf('o' to 1, '*' to -1, ' ' to 0)
      
      class Board(private val rows: Int, private val columns: Int) {
      
          private val rowRange = 0 until rows
          private val colRange = 0 until columns
          private val field = List(rows) { MutableList(columns) {' '} }
          private val levels = MutableList(columns) {0}
      
          private val caption = (1..columns).joinToString("") { " $it" }
          private val row = Array(columns + 1) { '║' }.joinToString("%c")
          private val footer = '╚' + Array(columns) {'═'}.joinToString("╩") + '╝'
      
          fun print() {
              println(caption)
              field.reversed().forEach { println(row.format(*it.toTypedArray())) }
              println(footer)
          }
      
          fun inputRangeErrors(column: Int): Boolean {
              if (column !in colRange) {
                  println("The column number is out of range (1 - $columns)")
                  return true
              }
              if (levels[column] == rows) {
                  println("Column ${column + 1} is full")
                  return true
              }
              return false
          }
      
          fun isWinningCondition(): Boolean {
              // Horizontal checks
              if (field.any { isWinningCondition(it) }) return true
      
              // Vertical checks
              colRange.forEach { it ->
                  val col = it
                  val colData = rowRange.map { it1 ->
                      val row = it1
                      field[row][col]
                  }
                  if (isWinningCondition(colData)) return true
              }
      
              // Diagonal checks
              return isSlashDiagonalWin() || isBackslashDiagonalWin()
          }
      
          private fun isSlashDiagonalWin(): Boolean {
              for (startCol in columns - 4 downTo 4 - rows) {
                  val line = rowRange.zip(startCol until startCol + rows)
                      .map {
                          if (it.second !in colRange) ' ' else field[it.first][it.second]
                      }
                  if (isWinningCondition(line)) return true
              }
              return false
          }
      
          private fun isBackslashDiagonalWin(): Boolean {
              for (startCol in 3 until columns + rows - 4) {
                  val line = rowRange.zip(startCol downTo startCol - rows + 1)
                      .map {
                          if (it.second !in colRange) ' ' else field[it.first][it.second]
                      }
                  if (isWinningCondition(line)) return true
              }
              return false
          }
      
          private fun isWinningCondition(line: Iterable<Char>): Boolean {
              val intLine = line.map { markerValues.getOrDefault(it, 0) }.toMutableList()
              for (i in 1..intLine.lastIndex)
                  if (intLine[i - 1] < 0 && intLine[i] < 0 || intLine[i - 1] > 0 && intLine[i] > 0)
                      intLine[i] += intLine[i - 1]
      
              return intLine.any { it == -4 || it == 4 }
          }
      
          fun isDraw(): Boolean = levels.all { it == rows }
      
          fun makeMove(column: Int, move: Char) {
              field[levels[column]][column] = move
              levels[column] += 1
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/14782#comment
status: Unchecked
record: -1
